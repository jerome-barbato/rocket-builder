//v1.0
$animation-duration     : 1s !default;
$animation-offset       : 50% !default;
$animation-offset-rem   : 6rem !default;
$animation-delay        : $animation-duration/10 !default;
$animation-delay-values : 35 !default;
$animation-reveal-color : #eee !default;

@mixin lib-animation{

  @each $name, $properties in $animations{
    [data-animation="#{$name}"]{
      animation: $name $animation-duration $ease-out-cubic both;
      will-change: unquote($properties);
    }
  }

  [data-animation="reveal"]{
    position: relative;
    &:after{
      display: block; position: overlay(); z-index: 1;
      background: $animation-reveal-color; content: ''; animation: appear $ease-in-out-cubic $animation-duration both
    }
    > *{ animation: fade-in-half $animation-duration steps(1,end) both; height: 100% }
    > span{ display: inline-block; line-height: 100% }
    > img{ display: block }
    > *, &:after{ animation-delay: inherit }
    &[data-activation="wait"], [data-activation="wait"] &{ > *, &:after{ animation-play-state: paused!important }}
    &[data-activation="rewind"], [data-activation="rewind"] &{
      > *{ animation-name: fade-out-half }
      &:after{ animation-name: disappear }
    }
  }

  @for $i from 0 through $animation-delay-values{
    [data-delay="#{$i}"]{ animation-delay: $animation-delay*$i }
  }

  @each $name, $easing in $easings{
    [data-easing="#{$name}"]{ animation-timing-function: $easing }
  }
}


@if( index($libraries, 'animation') ){
  @include lib-animation;
}
